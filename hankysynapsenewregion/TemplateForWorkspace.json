{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "hankysynapsenewregion"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"CosmosDb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb1'"
		},
		"HankyADLS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'HankyADLS'"
		},
		"HankyAzureMLService_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'HankyAzureMLService'"
		},
		"Hogia2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Hogia2'"
		},
		"hankysynapsenewregion-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'hankysynapsenewregion-WorkspaceDefaultSqlServer'"
		},
		"vehiclejourneysdomain_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'vehiclejourneysdomain'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://HankyKV.vault.azure.net/"
		},
		"HankyADLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://hankyadlsv2.dfs.core.windows.net"
		},
		"HankyAzureMLService_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "50b4f404-928c-4278-87e8-784d04814a4c"
		},
		"HankyAzureMLService_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "Cognitive"
		},
		"HankyAzureMLService_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "619ee4dd-d5e9-42ff-be3b-e94f10697583"
		},
		"HankyAzureMLService_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"hankysynapsenewregion-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://hankysynapsenewregionadl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_training')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_pvl",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_pvl",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "SalesLT.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "SalesLT.@{item().destination.table}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlPoolSink"
										},
										"enableStaging": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_pvl",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_pvl",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@concat(item().source.schema,item().source.table,'\\',item().destination.fileName)"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Address"
								},
								"destination": {
									"table": "Address"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "AddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "AddressID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "AddressLine1",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AddressLine1",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "AddressLine2",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AddressLine2",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "City",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "City",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "StateProvince",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "StateProvince",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "CountryRegion",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "CountryRegion",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "PostalCode",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "PostalCode",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "Customer"
								},
								"destination": {
									"table": "Customer"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "NameStyle",
													"type": "Boolean",
													"physicalType": "bit"
												},
												"sink": {
													"name": "NameStyle",
													"type": "Boolean",
													"physicalType": "bit"
												}
											},
											{
												"source": {
													"name": "Title",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Title",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "FirstName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "FirstName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "MiddleName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "MiddleName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "LastName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "LastName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "Suffix",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Suffix",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "CompanyName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "CompanyName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "SalesPerson",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "SalesPerson",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "EmailAddress",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "EmailAddress",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "Phone",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Phone",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "PasswordHash",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "PasswordHash",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "PasswordSalt",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "PasswordSalt",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "CustomerAddress"
								},
								"destination": {
									"table": "CustomerAddress"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "AddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "AddressID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "AddressType",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AddressType",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "Product"
								},
								"destination": {
									"table": "Product"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "ProductNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "ProductNumber",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "Color",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Color",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "StandardCost",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "StandardCost",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "ListPrice",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "ListPrice",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "Size",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Size",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "Weight",
													"type": "Decimal",
													"physicalType": "decimal"
												},
												"sink": {
													"name": "Weight",
													"type": "Decimal",
													"physicalType": "decimal",
													"scale": 2,
													"precision": 8
												}
											},
											{
												"source": {
													"name": "ProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "SellStartDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "SellStartDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											},
											{
												"source": {
													"name": "SellEndDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "SellEndDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											},
											{
												"source": {
													"name": "DiscontinuedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "DiscontinuedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											},
											{
												"source": {
													"name": "ThumbNailPhoto",
													"type": "Byte[]",
													"physicalType": "varbinary"
												},
												"sink": {
													"name": "ThumbNailPhoto",
													"type": "Byte[]",
													"physicalType": "varbinary"
												}
											},
											{
												"source": {
													"name": "ThumbnailPhotoFileName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "ThumbnailPhotoFileName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductCategory"
								},
								"destination": {
									"table": "ProductCategory"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "ParentProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ParentProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductDescription"
								},
								"destination": {
									"table": "ProductDescription"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductDescriptionID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductDescriptionID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Description",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductModel"
								},
								"destination": {
									"table": "ProductModel"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductModelProductDescription"
								},
								"destination": {
									"table": "ProductModelProductDescription"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "ProductDescriptionID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductDescriptionID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "Culture",
													"type": "String",
													"physicalType": "nchar"
												},
												"sink": {
													"name": "Culture",
													"type": "String",
													"physicalType": "nchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "SalesOrderDetail"
								},
								"destination": {
									"table": "SalesOrderDetail"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "SalesOrderID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "SalesOrderID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "SalesOrderDetailID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "SalesOrderDetailID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "OrderQty",
													"type": "Int16",
													"physicalType": "smallint"
												},
												"sink": {
													"name": "OrderQty",
													"type": "Int16",
													"physicalType": "smallint"
												}
											},
											{
												"source": {
													"name": "ProductID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "UnitPrice",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "UnitPrice",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "UnitPriceDiscount",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "UnitPriceDiscount",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "LineTotal",
													"type": "Decimal",
													"physicalType": "numeric"
												},
												"sink": {
													"name": "LineTotal",
													"type": "Decimal",
													"physicalType": "decimal",
													"scale": 6,
													"precision": 38
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "SalesOrderHeader"
								},
								"destination": {
									"table": "SalesOrderHeader"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "SalesOrderID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "SalesOrderID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "RevisionNumber",
													"type": "Byte",
													"physicalType": "tinyint"
												},
												"sink": {
													"name": "RevisionNumber",
													"type": "Byte",
													"physicalType": "tinyint"
												}
											},
											{
												"source": {
													"name": "OrderDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "OrderDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											},
											{
												"source": {
													"name": "DueDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "DueDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											},
											{
												"source": {
													"name": "ShipDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ShipDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "Byte",
													"physicalType": "tinyint"
												},
												"sink": {
													"name": "Status",
													"type": "Byte",
													"physicalType": "tinyint"
												}
											},
											{
												"source": {
													"name": "OnlineOrderFlag",
													"type": "Boolean",
													"physicalType": "bit"
												},
												"sink": {
													"name": "OnlineOrderFlag",
													"type": "Boolean",
													"physicalType": "bit"
												}
											},
											{
												"source": {
													"name": "SalesOrderNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "SalesOrderNumber",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "PurchaseOrderNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "PurchaseOrderNumber",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "AccountNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AccountNumber",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "ShipToAddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ShipToAddressID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "BillToAddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "BillToAddressID",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "ShipMethod",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "ShipMethod",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "CreditCardApprovalCode",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "CreditCardApprovalCode",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "SubTotal",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "SubTotal",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "TaxAmt",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "TaxAmt",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "Freight",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "Freight",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "TotalDue",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "TotalDue",
													"type": "Decimal",
													"physicalType": "money",
													"scale": 4,
													"precision": 19
												}
											},
											{
												"source": {
													"name": "Comment",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Comment",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "String",
													"physicalType": "varchar"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-07T18:40:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_pvl')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_pvl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveFiles')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSource_Folder",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "CopyAFile",
									"description": "Copy a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"recursive": false
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataDestination",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteAFile",
									"description": "Delete a file from the source store",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyAFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"SourceStore_Location": {
						"type": "String"
					},
					"SourceStore_Directory": {
						"type": "String"
					},
					"DestinationStore_Location": {
						"type": "String"
					},
					"DestinationStore_Directory": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-03-05T09:00:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BinaryDataSource_Folder')]",
				"[concat(variables('workspaceId'), '/datasets/BinaryDataSource_File')]",
				"[concat(variables('workspaceId'), '/datasets/BinaryDataDestination')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['SequenceNumber']"
										},
										"sink": {
											"name": "SequenceNumber"
										}
									},
									{
										"source": {
											"path": "['JourneyPatternPointRef']"
										},
										"sink": {
											"name": "JourneyPatternPointRef"
										}
									},
									{
										"source": {
											"path": "['IsTimingPoint']"
										},
										"sink": {
											"name": "IsTimingPoint"
										}
									},
									{
										"source": {
											"path": "['DepartureTimetabledEarliestDateTime']"
										},
										"sink": {
											"name": "DepartureTimetabledEarliestDateTime"
										}
									},
									{
										"source": {
											"path": "['ArrivalTimetabledLatestDateTime']"
										},
										"sink": {
											"name": "ArrivalTimetabledLatestDateTime"
										}
									},
									{
										"source": {
											"path": "$['JourneyNumber']"
										},
										"sink": {
											"name": "JourneyNumber"
										}
									},
									{
										"source": {
											"path": "$['OriginName']"
										},
										"sink": {
											"name": "OriginName"
										}
									},
									{
										"source": {
											"path": "$['PrimaryDestinationName']"
										},
										"sink": {
											"name": "PrimaryDestinationName"
										}
									},
									{
										"source": {
											"path": "$['SecondaryDestinationName']"
										},
										"sink": {
											"name": "SecondaryDestinationName"
										}
									},
									{
										"source": {
											"path": "$['SecondaryDestinationType']"
										},
										"sink": {
											"name": "SecondaryDestinationType"
										}
									},
									{
										"source": {
											"path": "$['TransportMode']"
										},
										"sink": {
											"name": "TransportMode"
										}
									},
									{
										"source": {
											"path": "$['ContractorOrganizationId']"
										},
										"sink": {
											"name": "ContractorOrganizationId"
										}
									},
									{
										"source": {
											"path": "$['TimetabledStartDateTime']"
										},
										"sink": {
											"name": "TimetabledStartDateTime"
										}
									},
									{
										"source": {
											"path": "$['TimetabledEndDateTime']"
										},
										"sink": {
											"name": "TimetabledEndDateTime"
										}
									},
									{
										"source": {
											"path": "$['LineRef']"
										},
										"sink": {
											"name": "LineRef"
										}
									},
									{
										"source": {
											"path": "$['DirectionOfLineRef']"
										},
										"sink": {
											"name": "DirectionOfLineRef"
										}
									},
									{
										"source": {
											"path": "$['JourneyPatternRef']"
										},
										"sink": {
											"name": "JourneyPatternRef"
										}
									},
									{
										"source": {
											"path": "$['AdvanceOrderCondition']"
										},
										"sink": {
											"name": "AdvanceOrderCondition"
										}
									},
									{
										"source": {
											"path": "$['JourneyCreationParameters']"
										},
										"sink": {
											"name": "JourneyCreationParameters"
										}
									},
									{
										"source": {
											"path": "$['JourneyRef']['ObjectRef']"
										},
										"sink": {
											"name": "ObjectRef"
										}
									},
									{
										"source": {
											"path": "$['JourneyRef']['OperatingDayDate']"
										},
										"sink": {
											"name": "OperatingDayDate"
										}
									},
									{
										"source": {
											"path": "$['TimeStamps'][0]['TimeStamp']"
										},
										"sink": {
											"name": "TimeStamp"
										}
									},
									{
										"source": {
											"path": "$['TimeStamps'][0]['Name']"
										},
										"sink": {
											"name": "Name"
										}
									},
									{
										"source": {
											"path": "$['partitionKey']"
										},
										"sink": {
											"name": "partitionKey"
										}
									},
									{
										"source": {
											"path": "$['LastModifiedDateTime']"
										},
										"sink": {
											"name": "LastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "$['ttl']"
										},
										"sink": {
											"name": "ttl"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "$['Type']"
										},
										"sink": {
											"name": "Type"
										}
									},
									{
										"source": {
											"path": "$['_rid']"
										},
										"sink": {
											"name": "_rid"
										}
									},
									{
										"source": {
											"path": "$['_self']"
										},
										"sink": {
											"name": "_self"
										}
									},
									{
										"source": {
											"path": "$['_etag']"
										},
										"sink": {
											"name": "_etag"
										}
									},
									{
										"source": {
											"path": "$['_attachments']"
										},
										"sink": {
											"name": "_attachments"
										}
									},
									{
										"source": {
											"path": "$['_ts']"
										},
										"sink": {
											"name": "_ts"
										}
									}
								],
								"collectionReference": "$['Calls']"
							}
						},
						"inputs": [
							{
								"referenceName": "HogiaSourceJSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "HogiaSinkParquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Partners/Hogia"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-22T13:13:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/HogiaSourceJSON')]",
				"[concat(variables('workspaceId'), '/datasets/HogiaSinkParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline DF')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "HogiaTest",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceJson": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "Partners/Hogia"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/HogiaTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/exec_notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_table",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "create_table",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-04T11:03:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/create_table')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BinaryDataDestination')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "It describes the destination store.",
				"linkedServiceName": {
					"referenceName": "hankysynapsenewregion-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/hankysynapsenewregion-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BinaryDataSource_File')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "It describes the file in the data source store.",
				"linkedServiceName": {
					"referenceName": "HankyADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HankyADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BinaryDataSource_Folder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "It describes the folder in the data source store.",
				"linkedServiceName": {
					"referenceName": "HankyADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HankyADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_pvl')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				},
				"sqlPool": {
					"referenceName": "hankysqlpool1",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/hankysqlpool1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HogiaSinkParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HankyADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Hogia/PARQUET/vehiclejourneysdomain/265581f3-17e5-4d58-bba1-a97b00dfcf96",
						"fileSystem": "partners"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HankyADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HogiaSourceJSON')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HankyADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "document_for_partiton_2021-02-119015012000800158.json",
						"folderPath": "Hogia/JSON/vehiclejourneysdomain/265581f3-17e5-4d58-bba1-a97b00dfcf96",
						"fileSystem": "partners"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Calls": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"SequenceNumber": {
										"type": "integer"
									},
									"JourneyPatternPointRef": {
										"type": "string"
									},
									"IsTimingPoint": {
										"type": "boolean"
									},
									"DepartureTimetabledEarliestDateTime": {
										"type": "string"
									},
									"ArrivalTimetabledLatestDateTime": {
										"type": "string"
									}
								}
							}
						},
						"JourneyNumber": {
							"type": "integer"
						},
						"OriginName": {
							"type": "string"
						},
						"PrimaryDestinationName": {
							"type": "string"
						},
						"SecondaryDestinationName": {
							"type": "string"
						},
						"SecondaryDestinationType": {
							"type": "integer"
						},
						"TransportMode": {
							"type": "integer"
						},
						"ContractorOrganizationId": {
							"type": "string"
						},
						"TimetabledStartDateTime": {
							"type": "string"
						},
						"TimetabledEndDateTime": {
							"type": "string"
						},
						"LineRef": {
							"type": "string"
						},
						"DirectionOfLineRef": {
							"type": "string"
						},
						"JourneyPatternRef": {
							"type": "string"
						},
						"AdvanceOrderCondition": {
							"type": "string"
						},
						"JourneyCreationParameters": {
							"type": "string"
						},
						"JourneyRef": {
							"type": "object",
							"properties": {
								"ObjectRef": {
									"type": "string"
								},
								"OperatingDayDate": {
									"type": "string"
								}
							}
						},
						"TimeStamps": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"TimeStamp": {
										"type": "string"
									},
									"Name": {
										"type": "string"
									}
								}
							}
						},
						"partitionKey": {
							"type": "string"
						},
						"LastModifiedDateTime": {
							"type": "string"
						},
						"ttl": {
							"type": "integer"
						},
						"id": {
							"type": "string"
						},
						"Type": {
							"type": "string"
						},
						"_rid": {
							"type": "string"
						},
						"_self": {
							"type": "string"
						},
						"_etag": {
							"type": "string"
						},
						"_attachments": {
							"type": "string"
						},
						"_ts": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HankyADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_pvl')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVault1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HankyADLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('HankyADLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('HankyADLS_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HankyAzureMLService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('HankyAzureMLService_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('HankyAzureMLService_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "hankyaml",
					"servicePrincipalId": "[parameters('HankyAzureMLService_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('HankyAzureMLService_servicePrincipalKey')]"
					},
					"tenant": "[parameters('HankyAzureMLService_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hogia2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('Hogia2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIPBICAT')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "77f40803-dca6-4e92-bcab-1104d6a99c97",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hankysynapsenewregion-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('hankysynapsenewregion-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hankysynapsenewregion-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('hankysynapsenewregion-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/vehiclejourneysdomain')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('vehiclejourneysdomain_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HogiaTest')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HogiaSourceJSON",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HogiaSinkParquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tCalls as (SequenceNumber as string, JourneyPatternPointRef as string, IsTimingPoint as boolean, DepartureTimetabledEarliestDateTime as string, ArrivalTimetabledLatestDateTime as string)[],\n\t\tJourneyNumber as string,\n\t\tOriginName as string,\n\t\tPrimaryDestinationName as string,\n\t\tSecondaryDestinationName as string,\n\t\tSecondaryDestinationType as string,\n\t\tTransportMode as string,\n\t\tContractorOrganizationId as string,\n\t\tTimetabledStartDateTime as string,\n\t\tTimetabledEndDateTime as string,\n\t\tLineRef as string,\n\t\tDirectionOfLineRef as string,\n\t\tJourneyPatternRef as string,\n\t\tAdvanceOrderCondition as string,\n\t\tJourneyCreationParameters as string,\n\t\tJourneyRef as (ObjectRef as string, OperatingDayDate as string),\n\t\tTimeStamps as (TimeStamp as string, Name as string)[],\n\t\tpartitionKey as string,\n\t\tLastModifiedDateTime as string,\n\t\tttl as string,\n\t\tid as string,\n\t\tType as string,\n\t\t{_rid} as string,\n\t\t{_self} as string,\n\t\t{_etag} as string,\n\t\t{_attachments} as string,\n\t\t{_ts} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument',\n\tpartitionBy('hash', 1)) ~> sourceJson\nsourceJson select(mapColumn(\n\t\tCalls,\n\t\tJourneyNumber,\n\t\tOriginName,\n\t\tPrimaryDestinationName,\n\t\tSecondaryDestinationName,\n\t\tSecondaryDestinationType,\n\t\tTransportMode,\n\t\tContractorOrganizationId,\n\t\tTimetabledStartDateTime,\n\t\tTimetabledEndDateTime,\n\t\tLineRef,\n\t\tDirectionOfLineRef,\n\t\tJourneyPatternRef,\n\t\tAdvanceOrderCondition,\n\t\tJourneyCreationParameters,\n\t\tJourneyRef,\n\t\tTimeStamps,\n\t\tpartitionKey,\n\t\tLastModifiedDateTime,\n\t\tttl,\n\t\tid,\n\t\t{_rid},\n\t\t{_self},\n\t\t{_etag},\n\t\t{_attachments},\n\t\t{_ts}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/HogiaSourceJSON')]",
				"[concat(variables('workspaceId'), '/datasets/HogiaSinkParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/C')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL TABLE [dbo].[ExternalTable]\n(\n\t[VendorID]\n\t,[tpep_pickup_datetime]\n,[tpep_dropoff_datetime]\n,[passenger_count]\n,[trip_distance]\n,[RatecodeID]\n,[store_and_fwd_flag]\n,[PULocationID]\n,[DOLocationID]\n,[payment_type]\n,[fare_amount]\n,[extra]\n,[mta_tax]\n,[tip_amount]\n,[tolls_amount]\n,[improvement_surcharge]\n,[total_amount]\n,[congestion_surcharge]\n)\nWITH\n(\n\tLOCATION = '/folder/file',\n\tDATA_SOURCE = [DataSource1],\n\tFILE_FORMAT = [FileFormat1]\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "hankysqlpool1",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/JOIN_Openrowset')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Hogia"
				},
				"content": {
					"query": "WITH rides AS\n(\n    SELECT TOP 100 * \n    FROM OPENROWSET('CosmosDB',\n                'Account=hankycosmos;Database=vehiclejourneysdomain;Key=5I1dKBnvbWDXOdCaeD9LMV6VcVF1Jx5be3qrdV9waBIbwgcO3Pa8lHkTlypL8re54ElmxN3VsOkONSVKKO2Qbw==',\n                [265581f3-17e5-4d58-bba1-a97b00dfcf96])\n                AS [MyRides]\n),\nMonitoredVehicleJourneys AS\n(\n    SELECT TOP 100 * \n    FROM OPENROWSET('CosmosDB',\n                'Account=hankycosmos;Database=Hogia;Key=5I1dKBnvbWDXOdCaeD9LMV6VcVF1Jx5be3qrdV9waBIbwgcO3Pa8lHkTlypL8re54ElmxN3VsOkONSVKKO2Qbw==',\n                MonitoredVehicleJourneys)\n                AS [MyMonitoredVehicleJourneys]\n                WHERE PartitionKey ='265581f3-17e5-4d58-bba1-a97b00dfcf96:9015012000800158:2021-02-11' \n               \n)\nSELECT\n*\nFROM rides r\nLEFT JOIN MonitoredVehicleJourneys MVJ on r.PartitionKey = MVJ.PartitionKey\n--ORDER BY current_day ASC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Create Schema SalesLT;\nGO\n\n\nCREATE TABLE [SalesLT].[Customer] ([CustomerID] Int NOT NULL\n,[NameStyle] Bit NOT NULL\n,[Title] NVarchar(8) NULL\n,[FirstName] NVarchar(50) NOT NULL\n,[MiddleName] NVarchar(50) NULL\n,[LastName] NVarchar(50) NOT NULL\n,[Suffix] NVarchar(10) NULL\n,[CompanyName] NVarchar(128) NULL\n,[SalesPerson] NVarchar(256) NULL\n,[EmailAddress] NVarchar(50) NULL\n,[Phone] NVarchar(25) NULL\n,[PasswordHash] VarChar(128) NOT NULL\n,[PasswordSalt] VarChar(10) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[ProductModel] ([ProductModelID] Int NOT NULL\n,[Name] NVarchar(50) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[ProductDescription] ([ProductDescriptionID] Int NOT NULL\n,[Description] NVarchar(400) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[Product] ([ProductID] Int NOT NULL\n,[Name] NVarchar(50) NOT NULL\n,[ProductNumber] NVarchar(25) NOT NULL\n,[Color] NVarchar(15) NULL\n,[StandardCost] Money NOT NULL\n,[ListPrice] Money NOT NULL\n,[Size] NVarchar(5) NULL\n,[Weight] Decimal(8,2) NULL\n,[ProductCategoryID] Int NULL\n,[ProductModelID] Int NULL\n,[SellStartDate] DateTime NOT NULL\n,[SellEndDate] DateTime NULL\n,[DiscontinuedDate] DateTime NULL\n,[ThumbNailPhoto] Varbinary(8000) NULL\n,[ThumbnailPhotoFileName] NVarchar(50) NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[ProductModelProductDescription] ([ProductModelID] Int NOT NULL\n,[ProductDescriptionID] Int NOT NULL\n,[Culture] NChar(6) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[ProductCategory] ([ProductCategoryID] Int NOT NULL\n,[ParentProductCategoryID] Int NULL\n,[Name] NVarchar(50) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[Address] ([AddressID] Int NOT NULL\n,[AddressLine1] NVarchar(60) NOT NULL\n,[AddressLine2] NVarchar(60) NULL\n,[City] NVarchar(30) NOT NULL\n,[StateProvince] NVarchar(50) NOT NULL\n,[CountryRegion] NVarchar(50) NOT NULL\n,[PostalCode] NVarchar(15) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[CustomerAddress] ([CustomerID] Int NOT NULL\n,[AddressID] Int NOT NULL\n,[AddressType] NVarchar(50) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\nCREATE TABLE [SalesLT].[SalesOrderDetail] ([SalesOrderID] Int NOT NULL\n,[SalesOrderDetailID] Int NOT NULL\n,[OrderQty] SmallInt NOT NULL\n,[ProductID] Int NOT NULL\n,[UnitPrice] Money NOT NULL\n,[UnitPriceDiscount] Money NOT NULL\n,[LineTotal] Decimal(38,6) NOT NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH([SalesOrderID]))\n\nCREATE TABLE [SalesLT].[SalesOrderHeader] ([SalesOrderID] Int NOT NULL\n,[RevisionNumber] TinyInt NOT NULL\n,[OrderDate] DateTime NOT NULL\n,[DueDate] DateTime NOT NULL\n,[ShipDate] DateTime NULL\n,[Status] TinyInt NOT NULL\n,[OnlineOrderFlag] Bit NOT NULL\n,[SalesOrderNumber] NVarchar(25) NOT NULL\n,[PurchaseOrderNumber] NVarchar(25) NULL\n,[AccountNumber] NVarchar(15) NULL\n,[CustomerID] Int NOT NULL\n,[ShipToAddressID] Int NULL\n,[BillToAddressID] Int NULL\n,[ShipMethod] NVarchar(50) NOT NULL\n,[CreditCardApprovalCode] VarChar(15) NULL\n,[SubTotal] Money NOT NULL\n,[TaxAmt] Money NOT NULL\n,[Freight] Money NOT NULL\n,[TotalDue] Money NOT NULL\n,[Comment] NVarchar(4000) NULL\n,[rowguid] VarChar(38) NOT NULL\n,[ModifiedDate] DateTime NOT NULL\n) WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN)\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "hankysqlpool1",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://hankyadlsv2.dfs.core.windows.net/amsterdam/TaxiData/TaxiData/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [VendorID]\n,[tpep_pickup_datetime]\n,[tpep_dropoff_datetime]\n,[passenger_count]\n,[trip_distance]\n,[RatecodeID]\n,[store_and_fwd_flag]\n,[PULocationID]\n,[DOLocationID]\n,[payment_type]\n,[fare_amount]\n,[extra]\n,[mta_tax]\n,[tip_amount]\n,[tolls_amount]\n,[improvement_surcharge]\n,[total_amount]\n,[congestion_surcharge]\n FROM [dbo].[ext_taxidata]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "hankysqlpool1",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT \n\t\tYEAR(pickup_datetime),\n\t\tpassenger_count,\n\t\tCOUNT(*) AS cnt\nFROM  \n\tOPENROWSET(\n\t\tBULK 'https://hankyadlsv2.dfs.core.windows.net/amsterdam/TaxiData/TaxiData/part-00000-cef1404b-3f03-4496-a2a9-9e849189dde1-c000.snappy.parquet', \n\t\tFORMAT='PARQUET'\n\t) WITH (\n\t\tpickup_datetime DATETIME2, \n\t\tpassenger_count INT\n\t) AS nyc\nGROUP BY \n\tpassenger_count,\n\tYEAR(pickup_datetime)\nORDER BY\n\tYEAR(pickup_datetime),\n\tpassenger_count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCREATE VIEW ext_2018\nAS\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://hankyadlsv2.dfs.core.windows.net/amsterdam/TaxiData/TaxiData/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n    WHERE Tpep_pickup_datetime BETWEEN CAST('12/31/2019' AS datetime) AND CAST('1/1/2021' AS datetime)\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'amsterdam_hankyadlsv2_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [amsterdam_hankyadlsv2_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://amsterdam@hankyadlsv2.dfs.core.windows.net', \n\t\tTYPE     = HADOOP \n\t)\nGO\n\nCREATE EXTERNAL TABLE ext_2020 (\n\t[VendorID] int,\n\t[tpep_pickup_datetime] datetime2(7),\n\t[tpep_dropoff_datetime] datetime2(7),\n\t[passenger_count] int,\n\t[trip_distance] numeric(10,2),\n\t[RatecodeID] int,\n\t[store_and_fwd_flag] varchar(8000),\n\t[PULocationID] int,\n\t[DOLocationID] int,\n\t[payment_type] int,\n\t[fare_amount] numeric(10,2),\n\t[extra] numeric(10,2),\n\t[mta_tax] numeric(10,2),\n\t[tip_amount] numeric(10,2),\n\t[tolls_amount] numeric(10,2),\n\t[improvement_surcharge] numeric(10,2),\n\t[total_amount] numeric(10,2),\n\t[congestion_surcharge] varchar(8000)\n\t)\n\tWITH (\n\tLOCATION = 'TaxiData/Refined_18/part-00000-cef1404b-3f03-4496-a2a9-9e849189dde1-c000.snappy.parquet',\n\tDATA_SOURCE = [amsterdam_hankyadlsv2_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat],\n\tREJECT_TYPE = VALUE,\n\tREJECT_VALUE = 0\n\t)\nGO\n\nSELECT TOP 100 * FROM ext_2020\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "hankysqlpool1",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 8')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 100 * \nFROM OPENROWSET('CosmosDB',\n                'Account=hankycosmos;Database=Hogia;Key=5I1dKBnvbWDXOdCaeD9LMV6VcVF1Jx5be3qrdV9waBIbwgcO3Pa8lHkTlypL8re54ElmxN3VsOkONSVKKO2Qbw==',\n                MonitoredVehicleJourneys) AS MonitoredVehicleJourneys",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 100 * \nFROM OPENROWSET('CosmosDB',\n                'Account=hankycosmos;Database=vehiclejourneysdomain;Key=5I1dKBnvbWDXOdCaeD9LMV6VcVF1Jx5be3qrdV9waBIbwgcO3Pa8lHkTlypL8re54ElmxN3VsOkONSVKKO2Qbw==',\n                [265581f3-17e5-4d58-bba1-a97b00dfcf96]) AS [265581f3-17e5-4d58-bba1-a97b00dfcf96]\n\n\n\nSELECT TOP 100 * \nFROM OPENROWSET('CosmosDB',\n                'Account=hankycosmos;Database=Hogia;Key=5I1dKBnvbWDXOdCaeD9LMV6VcVF1Jx5be3qrdV9waBIbwgcO3Pa8lHkTlypL8re54ElmxN3VsOkONSVKKO2Qbw==',\n                MonitoredVehicleJourneys) AS MonitoredVehicleJourneys",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Load a streaming Spark DataFrame from a Cosmos DB container\n",
							"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
							"\n",
							"dfStream = spark.readStream\\\n",
							"    .format(\"cosmos.oltp\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"CosmosDb1\")\\\n",
							"    .option(\"spark.cosmos.container\", \"MonitoredVehicleJourneys\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.readEnabled\", \"true\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.startFromTheBeginning\", \"true\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.checkpointLocation\", \"/localReadCheckpointFolder\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.queryName\", \"streamQuery\")\\\n",
							"    .load()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"51fe0937-915f-40f8-b500-ad784c9b5158": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"AdvanceOrderCondition": "62",
												"SecondaryDestinationType": 0,
												"DirectionOfLineRef": "9014150501020000",
												"_attachments": "attachments/",
												"TimetabledStartDateTime": "2021-02-07T06:11:00+01:00",
												"TimeStamps": [
													{
														"Name": "PubTrans LastModifiedTime",
														"TimeStamp": "2021-02-04T03:00:16.307"
													},
													{
														"Name": "SyncPlannedPublicTransportInfo",
														"TimeStamp": "2021-02-04T03:05:31.3405176Z"
													},
													{
														"Name": "EventHub DequeuedTime",
														"TimeStamp": "2021-02-04T03:05:33.4396017Z"
													}
												],
												"TimetabledEndDateTime": "2021-02-07T06:42:00+01:00",
												"partitionKey": "2021-02-07:9015150501000012",
												"LineRef": "9011150501000000",
												"ContractorOrganizationId": "17de1786-0844-48db-bb67-a8e300e7a955",
												"JourneyRef": {
													"ObjectRef": "9015150501000012",
													"OperatingDayDate": "2021-02-07T00:00:00"
												},
												"JourneyPatternRef": "1310000143582366",
												"OriginName": "Gilleleje St.",
												"PrimaryDestinationName": "Hillerød",
												"id": "9015150501000012:2021-02-07",
												"_etag": "\"8800f8d5-0000-0d00-0000-601b647d0000\"",
												"_rid": "24NyANn5VJtyOQIAAAAACA==",
												"JourneyNumber": 12,
												"JourneyCreationParameters": "62",
												"Calls": [
													{
														"SequenceNumber": 1,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:11:00+01:00",
														"JourneyPatternPointRef": "9025086000001403",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:11:00+01:00"
													},
													{
														"SequenceNumber": 2,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:12:00+01:00",
														"JourneyPatternPointRef": "9025086000001402",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:12:00+01:00"
													},
													{
														"SequenceNumber": 3,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:14:00+01:00",
														"JourneyPatternPointRef": "9025086000001429",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:14:00+01:00"
													},
													{
														"SequenceNumber": 4,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:19:00+01:00",
														"JourneyPatternPointRef": "9025086000001409",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:18:00+01:00"
													},
													{
														"SequenceNumber": 5,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:22:00+01:00",
														"JourneyPatternPointRef": "9025086000001428",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:21:00+01:00"
													},
													{
														"SequenceNumber": 6,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:24:00+01:00",
														"JourneyPatternPointRef": "9025086000001431",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:24:00+01:00"
													},
													{
														"SequenceNumber": 7,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:27:00+01:00",
														"JourneyPatternPointRef": "9025086000001427",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:27:00+01:00"
													},
													{
														"SequenceNumber": 8,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:34:00+01:00",
														"JourneyPatternPointRef": "9025086000001421",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:33:00+01:00"
													},
													{
														"SequenceNumber": 9,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:34:00+01:00",
														"JourneyPatternPointRef": "9025086000001407",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:42:00+01:00"
													},
													{
														"SequenceNumber": 10,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:34:00+01:00",
														"JourneyPatternPointRef": "9025086000001433",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:42:00+01:00"
													},
													{
														"SequenceNumber": 11,
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:42:00+01:00",
														"JourneyPatternPointRef": "9025086000000683",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:42:00+01:00"
													}
												],
												"TransportMode": 3,
												"ttl": 691200,
												"_self": "dbs/24NyAA==/colls/24NyANn5VJs=/docs/24NyANn5VJtyOQIAAAAACA==/",
												"LastModifiedDateTime": "2021-02-04T03:05:33.521986+00:00",
												"Type": "Hogia.VehicleJourneyService.Domain.VehicleJourney",
												"SecondaryDestinationName": "",
												"_ts": 1612407933
											}
										],
										"schema": {
											"AdvanceOrderCondition": "string",
											"Calls": "ArrayType(StructType(StructField(ArrivalTimetabledLatestDateTime,StringType,true), StructField(DepartureTimetabledEarliestDateTime,StringType,true), StructField(IsTimingPoint,BooleanType,true), StructField(JourneyPatternPointRef,StringType,true), StructField(SequenceNumber,LongType,true)),true)",
											"ContractorOrganizationId": "string",
											"DirectionOfLineRef": "string",
											"JourneyCreationParameters": "string",
											"JourneyNumber": "bigint",
											"JourneyPatternRef": "string",
											"JourneyRef": "StructType(StructField(ObjectRef,StringType,true), StructField(OperatingDayDate,StringType,true))",
											"LastModifiedDateTime": "string",
											"LineRef": "string",
											"OriginName": "string",
											"PrimaryDestinationName": "string",
											"SecondaryDestinationName": "string",
											"SecondaryDestinationType": "bigint",
											"TimeStamps": "ArrayType(StructType(StructField(Name,StringType,true), StructField(TimeStamp,StringType,true)),true)",
											"TimetabledEndDateTime": "string",
											"TimetabledStartDateTime": "string",
											"TransportMode": "bigint",
											"Type": "string",
											"_attachments": "string",
											"_etag": "string",
											"_rid": "string",
											"_self": "string",
											"_ts": "bigint",
											"id": "string",
											"partitionKey": "string",
											"ttl": "bigint"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"AdvanceOrderCondition"
											],
											"seriesFieldKeys": [
												"JourneyNumber"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/50b4f404-928c-4278-87e8-784d04814a4c/resourceGroups/hankysynapsenewregion/providers/Microsoft.Synapse/workspaces/hankysynapsenewregion/bigDataPools/testsparkpool",
						"name": "testsparkpool",
						"type": "Spark",
						"endpoint": "https://hankysynapsenewregion.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://partners@hankyadlsv2.dfs.core.windows.net/Hogia/PARQUET/document_for_partiton_2021-02-079015150501000012.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.option(\"multiline\", \"true\").load('abfss://partners@hankyadlsv2.dfs.core.windows.net/Hogia/JSON/vehiclejourneysdomain/17de1786-0844-48db-bb67-a8e300e7a955/document_for_partiton_2021-02-079015150501000012.json', format='json')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 3')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://partners@hankyadlsv2.dfs.core.windows.net/Hogia/JSON/vehiclejourneysdomain/17de1786-0844-48db-bb67-a8e300e7a955/document_for_partiton_2021-02-079015150501000012.json', format='json')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"c47a70c1-727a-4787-b352-99b95ae6111c": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"AdvanceOrderCondition": "62",
												"SecondaryDestinationType": "0",
												"DirectionOfLineRef": "9014150501020000",
												"_attachments": "attachments/",
												"TimetabledStartDateTime": "2021-02-07T06:11:00+01:00",
												"TimeStamps": [
													{
														"TimeStamp": "2021-02-04T03:00:16.307",
														"Name": "PubTrans LastModifiedTime"
													},
													{
														"TimeStamp": "2021-02-04T03:05:31.3405176Z",
														"Name": "SyncPlannedPublicTransportInfo"
													},
													{
														"TimeStamp": "2021-02-04T03:05:33.4396017Z",
														"Name": "EventHub DequeuedTime"
													}
												],
												"TimetabledEndDateTime": "2021-02-07T06:42:00+01:00",
												"partitionKey": "2021-02-07:9015150501000012",
												"LineRef": "9011150501000000",
												"ContractorOrganizationId": "17de1786-0844-48db-bb67-a8e300e7a955",
												"JourneyRef": {
													"ObjectRef": "9015150501000012",
													"OperatingDayDate": "2021-02-07T00:00:00"
												},
												"JourneyPatternRef": "1310000143582366",
												"OriginName": "Gilleleje St.",
												"PrimaryDestinationName": "Hillerød",
												"id": "9015150501000012:2021-02-07",
												"_etag": "\"8800f8d5-0000-0d00-0000-601b647d0000\"",
												"_rid": "24NyANn5VJtyOQIAAAAACA==",
												"JourneyNumber": "12",
												"JourneyCreationParameters": "62",
												"Calls": [
													{
														"SequenceNumber": "1",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:11:00+01:00",
														"JourneyPatternPointRef": "9025086000001403",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:11:00+01:00"
													},
													{
														"SequenceNumber": "2",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:12:00+01:00",
														"JourneyPatternPointRef": "9025086000001402",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:12:00+01:00"
													},
													{
														"SequenceNumber": "3",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:14:00+01:00",
														"JourneyPatternPointRef": "9025086000001429",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:14:00+01:00"
													},
													{
														"SequenceNumber": "4",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:19:00+01:00",
														"JourneyPatternPointRef": "9025086000001409",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:18:00+01:00"
													},
													{
														"SequenceNumber": "5",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:22:00+01:00",
														"JourneyPatternPointRef": "9025086000001428",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:21:00+01:00"
													},
													{
														"SequenceNumber": "6",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:24:00+01:00",
														"JourneyPatternPointRef": "9025086000001431",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:24:00+01:00"
													},
													{
														"SequenceNumber": "7",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:27:00+01:00",
														"JourneyPatternPointRef": "9025086000001427",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:27:00+01:00"
													},
													{
														"SequenceNumber": "8",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:34:00+01:00",
														"JourneyPatternPointRef": "9025086000001421",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:33:00+01:00"
													},
													{
														"SequenceNumber": "9",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:34:00+01:00",
														"JourneyPatternPointRef": "9025086000001407",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:42:00+01:00"
													},
													{
														"SequenceNumber": "10",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:34:00+01:00",
														"JourneyPatternPointRef": "9025086000001433",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:42:00+01:00"
													},
													{
														"SequenceNumber": "11",
														"DepartureTimetabledEarliestDateTime": "2021-02-07T06:42:00+01:00",
														"JourneyPatternPointRef": "9025086000000683",
														"IsTimingPoint": false,
														"ArrivalTimetabledLatestDateTime": "2021-02-07T06:42:00+01:00"
													}
												],
												"TransportMode": "3",
												"ttl": "691200",
												"_self": "dbs/24NyAA==/colls/24NyANn5VJs=/docs/24NyANn5VJtyOQIAAAAACA==/",
												"LastModifiedDateTime": "2021-02-04T03:05:33.521986+00:00",
												"SecondaryDestinationName": "",
												"_ts": "1612407933"
											}
										],
										"schema": {
											"Calls": "ArrayType(StructType(StructField(SequenceNumber,StringType,true), StructField(JourneyPatternPointRef,StringType,true), StructField(IsTimingPoint,BooleanType,true), StructField(DepartureTimetabledEarliestDateTime,StringType,true), StructField(ArrivalTimetabledLatestDateTime,StringType,true)),true)",
											"JourneyNumber": "string",
											"OriginName": "string",
											"PrimaryDestinationName": "string",
											"SecondaryDestinationName": "string",
											"SecondaryDestinationType": "string",
											"TransportMode": "string",
											"ContractorOrganizationId": "string",
											"TimetabledStartDateTime": "string",
											"TimetabledEndDateTime": "string",
											"LineRef": "string",
											"DirectionOfLineRef": "string",
											"JourneyPatternRef": "string",
											"AdvanceOrderCondition": "string",
											"JourneyCreationParameters": "string",
											"JourneyRef": "StructType(StructField(ObjectRef,StringType,true), StructField(OperatingDayDate,StringType,true))",
											"TimeStamps": "ArrayType(StructType(StructField(TimeStamp,StringType,true), StructField(Name,StringType,true)),true)",
											"partitionKey": "string",
											"LastModifiedDateTime": "string",
											"ttl": "string",
											"id": "string",
											"_rid": "string",
											"_self": "string",
											"_etag": "string",
											"_attachments": "string",
											"_ts": "string"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"JourneyNumber"
											],
											"seriesFieldKeys": [
												"Calls"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/50b4f404-928c-4278-87e8-784d04814a4c/resourceGroups/hankysynapsenewregion/providers/Microsoft.Synapse/workspaces/hankysynapsenewregion/bigDataPools/testsparkpool",
						"name": "testsparkpool",
						"type": "Spark",
						"endpoint": "https://hankysynapsenewregion.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://partners@hankyadlsv2.dfs.core.windows.net/Hogia/PARQUET/part-00000-b9239c46-1d30-402e-a803-7b120017f644-c000.snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_table')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/50b4f404-928c-4278-87e8-784d04814a4c/resourceGroups/hankysynapsenewregion/providers/Microsoft.Synapse/workspaces/hankysynapsenewregion/bigDataPools/testsparkpool",
						"name": "testsparkpool",
						"type": "Spark",
						"endpoint": "https://hankysynapsenewregion.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DROP TABLE MyProducts"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/load_packages')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/50b4f404-928c-4278-87e8-784d04814a4c/resourceGroups/hankysynapsenewregion/providers/Microsoft.Synapse/workspaces/hankysynapsenewregion/bigDataPools/testsparkpool",
						"name": "testsparkpool",
						"type": "Spark",
						"endpoint": "https://hankysynapsenewregion.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.filedatalake import DataLakeServiceClient, FileSystemClient, DataLakeFileClient"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import pkg_resources\r\n",
							" \r\n",
							"for d in pkg_resources.working_set:\r\n",
							"    print(d)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hankysqlpool1')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}